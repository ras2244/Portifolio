#include <fstream>
#include <vector>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <numeric>
#include <algorithm>


namespace w8{
  template <class T>

  class DataTable{
  private:
    std::vector<T> x, y;
    int width, dec;

  public:
    DataTable(std::ifstream& is, int width, int dec){
      while (is.good()){
        std::string line;
        std::getline(is, line);
        std::stringstream newline;

        if (!line.empty()){

          newline.str(line);
          T vecX;
          T vecY;
          newline >> vecX >> vecY;

          x.push_back(vecX);
          y.push_back(vecY);
        }

      }
    } 
      
    
  T mean() const{ //- returns the mean value of the dependent coordinate
    T ret = std::accumulate(y.begin(), y.end(), 0.0);
    return ret / y.size();
}
  T sigma() const{ //- returns the standard deviation of the dependent coordinates
    T valMean = mean();
    T TotalDeviation = 0.0;

    for (int i = 0; i < y.size(); i++){
      TotalDeviation += (y[i] - valMean)*(y[i] - valMean);
      
    }
    return std::sqrt(TotalDeviation / y.size());
  }
  T median() const{ //- returns the median value of the dependent coordinate
    std::vector<T> med = y;

    std::sort(med.begin(), med.end());

    T median = med[med.size()/2];

    return median;

  }
  void regression(T& slope, T& y_intercept) const {//- returns the slope and intercept for the data set

    T avgX = std::accumulate(x.begin(), x.end(), 0.0) / x.size();
    T avgY = std::accumulate(y.begin(), y.end(), 0.0) / y.size();

    T numerator = 0.0;
    T denominator = 0.0;

    for (int i = 0; i < x.size(); ++i)
    {
      numerator += (x[i] - avgX) * (y[i] - avgY);
      denominator += (x[i] - avgX) * (x[i] - avgX);
    }

    slope = numerator / denominator;
    y_intercept = avgY - (slope * avgX);


  }
      void display(std::ostream& os) const{ //- displays the data pairs as shown below
        os << std::setw(width) << "x"
          << std::setw(width) << "y" << std::endl;

        for (int i = 0; i < x.size(); i++){
          os << std::setw(width) << std::fixed << std::setprecision(dec) << x[i]
          << std::setw(width) << std::fixed << std::setprecision(dec) << y[i] << std::endl;
        }
      }   
      
  };

  template <class T>
  std::ostream& operator<<(std::ostream& os, const DataTable<T>& ret){ //- inserts the data generated by display() into the output stream
    ret.display(os);
    return os;
  }
}
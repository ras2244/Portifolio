Script started on Thu 02 Feb 2017 10:16:07 AM EST
rde-oliveira-leal@matrix:~/OOP345/workshop4> whoami
rde-oliveira-leal
rde-oliveira-leal@matrix:~/OOP345/workshop4> cat w4.cpp KVList[K[K[K[Klist.h
#include <iostream>
#include <iomanip>
#include <string>
#include "KVlist.h"

template <typename K, typename V, size_t N>
void display(const std::string& msg, const KVList<K, V, N>& list, int w) {
  std::cout << msg;
  for (int i = 0; i < list.size(); i++)
    std::cout << std::setw(w) << list.key(i)
    << " : " << list.value(i) << std::endl;
}

int main(int argc, char** argv) {
  if (argc != 1) {
    std::cerr << argv[0] << ": too many arguments\n";
    return 1;
  }

  int width;
  bool keepreading;
  std::cout << std::fixed << std::setprecision(2);

  std::cout << "\nInventory\n=========\n";
  KVList <std::string, double, 5> inventory;
  std::string str;
  double price;

  keepreading = true;
  do {
    std::cout << "Product : ";
    getline(std::cin, str);
    if (str.compare("quit") == 0) {
      keepreading = false;
    }
    else {
      std::cout << "Price : ";
      std::cin >> price;
      std::cin.ignore();
      inventory.add(str, price);
    }
  } while (keepreading);
  display("\nPrice List\n----------\n", inventory, 13);

  std::cout << "\nCorrections\n-----------\n";
  keepreading = true;
  do {
    std::cout << "Product : ";
    getline(std::cin, str);
    if (str.compare("quit") == 0) {
      keepreading = false;
    }
    else {
      int i = inventory.find(str);
      if (i != -1) {
        std::cout << "Price : ";
        std::cin >> price;
        std::cin.ignore();
        inventory.replace(i, str, price);
      }
    }
  } while (keepreading);
  display("\nPrice List\n----------\n", inventory, 13);

  std::cout << "\nGlossary\n========\n";
  KVList <std::string, std::string, 5> glossary;
  std::string key, definition;

  keepreading = true;
  do {
    std::cout << "Key : ";
    getline(std::cin, key);
    if (key.compare("quit") == 0) {
      keepreading = false;
    }
    else {
      std::cout << "Definition : ";
      getline(std::cin, definition);
      glossary.add(key, definition);
    }
  } while (keepreading);
  display("\nEntries\n-------\n", glossary, 5);
}#pragma once
#include <iostream>
#include <cstring>


  template <typename K, typename V, size_t SIZE>

  class KVList{
    K k[SIZE];
    V v[SIZE];
    size_t tableSize;

    public:

    KVList() :tableSize(0){}
    
    size_t size() const{
      return tableSize;
    }

    const K& key(int i) const{ 
      if (i >= 0 && i < tableSize){
        return k[i];
      }
    }
    
    const V& value(int i) const{ 
      if (i >= 0 && i < tableSize){
        return v[i];
      }
    }
    
    KVList& add(const K& kk, const V& vv){
      if(tableSize < SIZE){
        k[tableSize] = kk;
        v[tableSize] = vv;
        tableSize++;
      }
      return *this;
    }
    
    int find(const K& kk) const{
      for (size_t i = 0; i < tableSize; i++){
        if (k[i] == kk){
          return i;
        }
      }
      return 0;
    }

    KVList& replace(int i, const K& kk, const V& vv){
      if (i >= 0 && i <tableSize){
        k[i] = kk;
        v[i] = vv;
      }

      return *this;
    }
  };
rde-oliveira-leal@matrix:~/OOP345/workshop4> cat w4.cpp KVlist.hwhoami[Kg++ -o w4 w4.cpp -std=c++0x -wall  [A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K 
g++: error: unrecognized option â€˜-wallâ€™
rde-oliveira-leal@matrix:~/OOP345/workshop4> g++ -o w4 w4.cpp -std=c++0x -wall  [A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Ccat w4.cpp KVlist.h[K
[K[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cwhoami[Kg++ -o w4 w4.cpp -std=c++0x 
rde-oliveira-leal@matrix:~/OOP345/workshop4> w4

Inventory
=========
Product : Pizza
Price : 4.49
Product : Pierogi
Price : 2.56
Product : potato ^H^H           Potato Chips
Price : 2.29
Product : Black Tea
Price : 4.49
Product : Green Tea
Price : 3.46
Product : Fruit Tea
Price : 2.29
Product : quit

Price List
----------
        Pizza : 4.49
      Pierogi : 2.56
 Potato Chips : 2.29
    Black Tea : 4.49
    Green Tea : 3.46

Corrections
-----------
Product : Black Tea
Price : 5.29
Product : quit

Price List
----------
        Pizza : 4.49
      Pierogi : 2.56
 Potato Chips : 2.29
    Black Tea : 5.29
    Green Tea : 3.46

Glossary
========
Key : CPU
Definition : central prosse^H     cessing unit
Key : a^HALU      ALU
Definition : aritmetic     hmetic logic unit
Key : quit

Entries
-------
  CPU : central processing unit
  ALU : arithmetic logic unit
rde-oliveira-leal@matrix:~/OOP345/workshop4> exit
exit

Script done on Thu 02 Feb 2017 10:20:09 AM EST
